@page "/rentitem"
@using VillageRental.Components.Data
@using VillageRental.Components.Data.Exceptions
@using VillageRental.Components.Instances
@using System.Text.RegularExpressions
@inject SystemManagement sysManagement
@inject DatabaseManager dbManager

<h1 class="text-center">Rental Management</h1>

<div class="d-flex flex-row gap-4 justify-content-between">
	<div class="bg-secondary p-4 rounded-2 flex-fill">
		<h3 class="text-center">Rental Details</h3>
		<div>
			<!-- Add input fields -->
			<div class="mb-3 row">
				<label for="rentalID" class="col-sm-3 col-form-label">Rental ID</label>
				<div class="col-sm-9">
					@if (currentRentalInformation == null)
					{
						<input type="text" class="form-control" id="rentalID" placeholder="Enter an ID for the rental information" @bind="rentalID" />
					}
					else
					{
						<input type="text" class="form-control" id="rentalID" @bind="rentalID" disabled />
					}
						
				</div>
			</div>
			<div class="mb-3 row">
				<label for="customerID" class="col-sm-3 col-form-label">Customer ID</label>
				<div class="col-sm-9">
					<input type="text" class="form-control" id="customerID" placeholder="Enter an ID of a customer who is renting" @bind="customerID" />
				</div>
			</div>
			<div class="mb-3 row">
				<label for="currentDate" class="col-sm-3 col-form-label">Date</label>
				<div class="col-sm-9">
					<input type="date" class="form-control" id="currentDate" @bind="currentDate" />
				</div>
			</div>
			<div class="mb-3 row">
				<label for="rentalStatus" class="col-sm-3 col-form-label">Rental Status</label>
				<div class="col-sm-9">
					<input type="text" class="form-control" id="rentalStatus" placeholder="Enter the status of the rental (Renting, Paying, Returning,...)" @bind="rentalStatus" />
				</div>
			</div>
			<p>TOTAL COST: $@totalCost</p>
		</div>
		<hr />
		<div class="text-center">
			<div class="bg-white overflow-scroll rounded-3">
				<!--Insert a foreach to display each button/link here -->
				@foreach (RentalItem item in currentRentalItemList)
				{
					<div>
						<p>Equipment ID: @item.EquipmentID</p>
						<div class="row mt-2">
							<div class="col">
								<p>Rental Date: @($"{item.RentalDate.Month}/{item.RentalDate.Day}/{item.RentalDate.Year}")</p>
								<p>Return Date: @($"{item.ReturnDate.Month}/{item.ReturnDate.Day}/{item.ReturnDate.Year}")</p>
							</div>
							<div class="col">
								<p>Cost of Rental: $@item.CostOfRental</p>
								<p>Quantity: @item.Quantity</p>
							</div>
						</div>
						<button class="btn btn-secondary" @onclick="() => currentRentalItemList.Remove(item)">Remove</button>
					</div>
				}
			</div>
			<div class="row mt-2">
				<div class="col">
					@if(currentRentalInformation == null)
					{
						<button class="btn btn-primary" @onclick="Rent">Rent</button>
					}
					else
					{
						<button class="btn btn-primary" @onclick="Rent">Save</button>
						<button class="btn btn-primary" @onclick="DeleteRentalInformation">Delete Record</button>
					}
					<button class="btn btn-primary" @onclick="ClearRentalDetails">Clear</button>
					<button class="btn btn-primary" @onclick="() => showModal = true">Find Rental</button>
				</div>
			</div>
		</div>
	</div>

	<div class="bg-secondary p-4 rounded-2">
		<h3 class="text-center">Add Rental Item</h3>
		<div>
			<div class="mb-3 row">
				<label for="equipmentID" class="col-sm-3 col-form-label">Equipment ID</label>
				<div class="col-sm-9">
					<input type="text" class="form-control" id="equipmentID" placeholder="Enter an ID of the equipment to rent" value="@equipmentID" @onchange="(ChangeEventArgs __e) => {
							equipmentID = __e.Value.ToString();
							UpdateRentalCost();
						}" />
				</div>
			</div>
			<div class="mb-3 row">
				<label for="rentalDate" class="col-sm-3 col-form-label">Rental Date</label>
				<div class="col-sm-9">
					<input type="date" class="form-control" id="rentalDate" value="@rentalDate" @onchange="(ChangeEventArgs __e) => {
							rentalDate = __e.Value.ToString();
							UpdateRentalCost();
						}" />
				</div>
			</div>
			<div class="mb-3 row">
				<label for="returnDate" class="col-sm-3 col-form-label">Return Date</label>
				<div class="col-sm-9">
					<input type="date" class="form-control" id="returnDate" value="@returnDate" @onchange="(ChangeEventArgs __e) => {
							returnDate = __e.Value.ToString();
							UpdateRentalCost();
						}" />
				</div>
			</div>
			<div class="mb-3 row">
				<label for="quantity" class="col-sm-3 col-form-label">Quantity</label>
				<div class="col-sm-9">
					<input type="number" min="0" class="form-control" id="quantity" value="@quantity" @onchange="(ChangeEventArgs __e) => {
							quantity = __e.Value.ToString();
							UpdateRentalCost();
						}" />
				</div>
			</div>
			<div class="mb-3 row">
				<label for="costOfRental" class="col-sm-3 col-form-label">Cost of Rental</label>
				<div class="col-sm-9">
					<input type="text" class="form-control" id="dailyRentalCost" placeholder="Cost will be calculated after all the information is entered" @bind="costOfRental" disabled />
				</div>
			</div>
			<div class="container gap-4 text-center">
				<div class="row mt-2">
					<div class="col">
						<button class="btn btn-primary" @onclick="AddRentalItem">Add</button>
						<button class="btn btn-primary" @onclick="ClearRentalItem">Clear</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@if (showModal)
{
	<div class="modal fade show" id="exampleModal" tabindex="-1" style="display: block; background: #00000080;">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title fs-5" id="exampleModalLabel">Find Rental Information</h3>
					<button type="button" class="btn-close" @onclick="() => showModal = false"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3 row">
						<label for="rentalIdToFind" class="col-sm-3 col-form-label">Rental ID:</label>
						<div class="col-sm-9">
							<input type="text" class="form-control" id="rentalIdToFind" @bind="rentalIdToFind" />
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="() => showModal = false">Close</button>
					<button type="button" class="btn btn-primary" @onclick="FindRental">Find</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	private bool showModal;
	private string rentalIdToFind;

	private RentalInformation currentRentalInformation;
	private List<RentalItem> currentRentalItemList = new List<RentalItem>();

	private string rentalID, customerID, rentalStatus, totalCost;
	private DateOnly currentDate = DateOnly.FromDateTime(DateTime.Now);

	private string equipmentID, rentalDate, returnDate, quantity, costOfRental;

	// private Regex regexDate = new Regex(@"^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[13-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$");

	private void Rent()
	{
		if (string.IsNullOrEmpty(rentalID) || string.IsNullOrEmpty(customerID) || string.IsNullOrEmpty(rentalStatus))
			return;

		if(sysManagement.FindCustomer(Convert.ToInt32(customerID)) == null)
		{
			Application.Current.MainPage.DisplayAlert("Notification", "Invalid customer id", "OK");
			return;
		}

		if(currentRentalItemList.Count <= 0)
		{
			Application.Current.MainPage.DisplayAlert("Notification", "A rental information must have at least one rental item", "OK");
			return;
		}

		try
		{
			if(currentRentalInformation == null)
			{
				currentRentalInformation = new RentalInformation(Convert.ToInt32(rentalID), currentDate.ToDateTime(TimeOnly.MinValue), Convert.ToInt32(customerID), sysManagement.FindCustomer(Convert.ToInt32(customerID)).LastName, rentalStatus);
				foreach (RentalItem item in currentRentalItemList)
				{
					currentRentalInformation.AddRentalItem(item);

					Equipment updatedEquipmentData = new Equipment(
						item.EquipmentID,
						sysManagement.FindEquipment(item.EquipmentID).CategoryID,
						sysManagement.FindEquipment(item.EquipmentID).Name,
						sysManagement.FindEquipment(item.EquipmentID).Description,
						sysManagement.FindEquipment(item.EquipmentID).DailyRentalCost,
						sysManagement.FindEquipment(item.EquipmentID).AvailableQuantity - item.Quantity,
						sysManagement.FindEquipment(item.EquipmentID).EquipmentStatus
					);


					sysManagement.UpdateEquipment(item.EquipmentID, updatedEquipmentData);

					dbManager.WriteEquipmentData(sysManagement);
				}

				sysManagement.RentItem(currentRentalInformation);

				Application.Current.MainPage.DisplayAlert("Notification", "Rental Information Created!", "OK");
			}
			else
			{
				RentalInformation newRentalData = new RentalInformation(Convert.ToInt32(rentalID), currentDate.ToDateTime(TimeOnly.MinValue), Convert.ToInt32(customerID), sysManagement.FindCustomer(Convert.ToInt32(customerID)).LastName, rentalStatus);

				dbManager.DeleteAllRentalItemInRentalInformation(Convert.ToInt32(rentalID));

				sysManagement.FindRentalInformation(Convert.ToInt32(rentalID)).UpdateRentalInformation(newRentalData, currentRentalItemList);

				Application.Current.MainPage.DisplayAlert("Notification", "Rental Information Updated!", "OK");
			}


			dbManager.WriteRentalInformationData(sysManagement);

			currentRentalInformation = null;

			ClearRentalDetails();
			ClearRentalItem();
		}
		catch(SystemHandler handler)
		{
			handler.DisplayError();
		}
		catch(Exception exception)
		{
			SystemHandler handler = new SystemHandler(exception.Message);
			handler.DisplayError();
		}
	}

	private void AddRentalItem()
	{
		if (string.IsNullOrEmpty(equipmentID) || string.IsNullOrEmpty(rentalDate) || string.IsNullOrEmpty(returnDate) || string.IsNullOrEmpty(quantity) || string.IsNullOrEmpty(costOfRental))
		{
			return;
		}

		if(Convert.ToDateTime(rentalDate) >= Convert.ToDateTime(returnDate))
		{
			Application.Current.MainPage.DisplayAlert("Error encounter!", "Invalid rental date range (rental date must be larger than return date)", "OK");
			return;
		}

		if (sysManagement.FindEquipment(Convert.ToInt32(equipmentID)) == null)
		{
			Application.Current.MainPage.DisplayAlert("Notification", "Equipment Not Found", "OK");
			return;
		}

		if (sysManagement.FindEquipment(Convert.ToInt32(equipmentID)).AvailableQuantity == 0)
		{
			Application.Current.MainPage.DisplayAlert("Notification", "This equipment doesn't have the available amount anymore", "OK");
			return;
		}
		else if(sysManagement.FindEquipment(Convert.ToInt32(equipmentID)).AvailableQuantity < Convert.ToInt32(quantity))
		{
			Application.Current.MainPage.DisplayAlert("Notification", "Rental quantity is LARGER than available quantity", "OK");
			return;
		}

		RentalItem newRentalItem = new RentalItem(Convert.ToInt32(equipmentID), Convert.ToDateTime(rentalDate), Convert.ToDateTime(returnDate), Convert.ToDouble(costOfRental), Convert.ToInt32(quantity));
		currentRentalItemList.Add(newRentalItem);

		Application.Current.MainPage.DisplayAlert("Notification", "Rental Item Added!", "OK");

		UpdateTotalCost();

		ClearRentalItem();
	}

	private void ClearRentalItem()
	{
		equipmentID = rentalDate = returnDate = quantity = costOfRental = string.Empty;
	}

	private void ClearRentalDetails()
	{
		rentalID = customerID = rentalStatus = totalCost = string.Empty;
		currentDate = DateOnly.FromDateTime(DateTime.Now);

		currentRentalInformation = null;

		currentRentalItemList.Clear();
	}

	private void UpdateRentalCost()
	{
		if (string.IsNullOrEmpty(equipmentID) || string.IsNullOrEmpty(rentalDate) || string.IsNullOrEmpty(returnDate) || string.IsNullOrEmpty(quantity))
			return;
		if (sysManagement.FindEquipment(Convert.ToInt32(equipmentID)) == null)
			return;

		costOfRental = ((double)(Convert.ToDateTime(returnDate) - Convert.ToDateTime(rentalDate)).Days * Convert.ToInt32(quantity) * sysManagement.FindEquipment(Convert.ToInt32(equipmentID)).DailyRentalCost).ToString();
	}

	private void UpdateTotalCost()
	{
		if (currentRentalItemList.Count == 0)
			return;	


		double _totalCost = 0.0;
		foreach (RentalItem item in currentRentalItemList)
			_totalCost += item.CostOfRental;

		totalCost = _totalCost.ToString();
	}

	private void FindRental()
	{
		if (string.IsNullOrEmpty(rentalIdToFind))
			return;

		if(sysManagement.FindRentalInformation(Convert.ToInt32(rentalIdToFind)) == null)
		{
			Application.Current.MainPage.DisplayAlert("Notification", "Cannot find rental information with this ID", "OK");
			return;
		}

		currentRentalInformation = sysManagement.FindRentalInformation(Convert.ToInt32(rentalIdToFind));

		rentalID = currentRentalInformation.RentalID.ToString();
		customerID = currentRentalInformation.CustomerID.ToString();
		currentDate = DateOnly.FromDateTime(currentRentalInformation.CurrentDate);
		rentalStatus = currentRentalInformation.RentalStatus;

		foreach(RentalItem item in currentRentalInformation.rentalItemList)
		{
			currentRentalItemList.Add(item);
		}

		UpdateRentalCost();

		showModal = false;
		rentalIdToFind = string.Empty;
	}

	private void DeleteRentalInformation()
	{
		if (currentRentalInformation == null)
			return;

		try
		{
			dbManager.DeleteRentalInformation(currentRentalInformation.RentalID);
			sysManagement.RemoveRentalInformation(currentRentalInformation.RentalID);

			Application.Current.MainPage.DisplayAlert("Notification", "Rental information delete successfully", "OK");

			ClearRentalItem();
			ClearRentalDetails();
		}
		catch(SystemHandler handler)
		{
			handler.DisplayError();
		}
		catch(Exception exception)
		{
			SystemHandler handler = new SystemHandler(exception.Message);
			handler.DisplayError();
		}
	}
}
